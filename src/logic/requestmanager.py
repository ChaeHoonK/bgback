from typing import List
from sql.type import Request, Coupon
from psycopg2 import Error
from datetime import datetime, timedelta

def send_notification_ws(receiver: int, message: str):
    # Implementation depends on the WebSocket library you're using
    # You'd typically send a message to the user on the other end of the WebSocket connection here
    pass


class RequestManager:
    def __init__(self, dbclient, request):
        self.dbclient = dbclient
        self.request = request

    def make_request(self, sender: int, receiver: int, sender_items: List[int], receiver_items: List[int]):
        try:
            # Add request to database
            # No need to generate requestUID, it will be auto-generated by PostgreSQL
            self.request.create(sender, sender_items, receiver, receiver_items, status=0)

            # Send WebSocket notification to receiver
            message = f"User {sender} has sent a trade request."
            send_notification_ws(receiver, message)

        except Exception as e:
            print(f"An error occurred: {e}")

    def response(self, decision: int, request: Request):
        try:
            # Update the request status in the database
            self.dbclient.cursor.execute(
                "UPDATE Requests SET status = %s WHERE requestUID = %s",
                (decision, request.requestUID)
            )
            self.dbclient.connection.commit()

            # Send a notification to the receiver
            if decision == 1:
                coupon_manager = CouponManager(self.dbclient)
                coupon_manager.create_coupon(request, 'change this later')

            self.sio.emit("notification", {"status": decision, "message": "Request status updated", "request": request}, to=request.receiver)

            return {"status": "Success", "message": "Updated request status and notified the user."}

        except Error as e:
            print(f"An error occurred: {e}")
            return {"status": "Error", "message": f"An error occurred: {e}"}


class CouponManager:
    def __init__(self, dbclient):
        self.dbclient = dbclient

    def create_coupon(self, request: Request, comment: str):
        try:
            # Create a new Coupon instance
            published_time = datetime.now()
            expiration = published_time + timedelta(weeks=2)
            itemList = request.sender_items
            user1_UID = request.sender
            user2_UID = request.receiver
            coupon = Coupon(None, user1_UID, user2_UID, itemList, published_time, expiration, comment)
            
            # Add new coupon to the database
            self.dbclient.cursor.execute(
                "INSERT INTO Coupons (user1_UID, user2_UID, itemList, published_time, expiration, comment) VALUES (%s, %s, %s, %s, %s, %s)",
                (user1_UID, user2_UID, itemList, published_time, expiration, comment)
            )
            self.dbclient.connection.commit()

            return {"status": "Success", "message": "Coupon created and added to database."}

        except Error as e:
            print(f"An error occurred: {e}")
            return {"status": "Error", "message": f"An error occurred: {e}"}
